#!/bin/bash
# Blaze Intelligence Comprehensive Vulnerability Scanning

echo "🔍 Starting comprehensive vulnerability scan..."

# 1. Dependency Scanning
echo "📦 Scanning dependencies..."
npm audit --audit-level moderate --json > reports/npm-audit.json
npx snyk test --json > reports/snyk-report.json || echo "Snyk scan completed with findings"

# 2. Code Quality & Security (SAST)
echo "🔍 Static code analysis..."
npx sonarjs-cli --src src/ --out reports/sonar-report.json || echo "SonarJS scan completed"

# 3. API Security Testing (DAST)  
echo "🌐 Dynamic API security testing..."
docker run -t owasp/zap2docker-stable zap-api-scan.py \
  -t https://blaze-intelligence.netlify.app/docs/openapi-spec.json \
  -f openapi -J reports/zap-api-report.json || echo "ZAP scan completed"

# 4. Container Security (if applicable)
echo "📦 Container security scan..."
if [ -f "Dockerfile" ]; then
  docker run --rm -v $(pwd):/workspace aquasec/trivy fs /workspace > reports/trivy-report.txt
fi

# 5. Configuration Security
echo "⚙️ Configuration security check..."
# Check for exposed secrets
npx secretlint "**/*" --format json --output reports/secrets-scan.json || echo "Secret scan completed"

# Check for security headers
curl -I https://blaze-intelligence.netlify.app/ | grep -i security > reports/security-headers.txt

# 6. Network Security
echo "🌐 Network security assessment..."
nmap -sV -oX reports/network-scan.xml blaze-intelligence.netlify.app || echo "Network scan completed"

# 7. Generate Summary Report
echo "📊 Generating security summary..."
cat > reports/security-summary.json << EOF
{
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "scan_type": "comprehensive_security",
  "platform": "Blaze Intelligence",
  "reports_generated": [
    "npm-audit.json",
    "snyk-report.json", 
    "sonar-report.json",
    "zap-api-report.json",
    "trivy-report.txt",
    "secrets-scan.json",
    "security-headers.txt",
    "network-scan.xml"
  ],
  "status": "completed"
}
EOF

# 8. Send alerts for critical findings
echo "🚨 Checking for critical vulnerabilities..."
CRITICAL_VULNS=$(jq '.vulnerabilities | map(select(.severity == "critical")) | length' reports/npm-audit.json 2>/dev/null || echo 0)

if [ "$CRITICAL_VULNS" -gt 0 ]; then
  echo "🚨 Critical vulnerabilities found: $CRITICAL_VULNS"
  
  # Send Slack alert
  curl -X POST "$SLACK_WEBHOOK_URL" \
    -H 'Content-type: application/json' \
    --data '{
      "text": "🚨 Security Alert: Critical vulnerabilities detected",
      "attachments": [{
        "color": "danger",
        "fields": [{
          "title": "Critical Vulnerabilities",
          "value": "'$CRITICAL_VULNS'",
          "short": true
        }, {
          "title": "Scan Time", 
          "value": "'$(date)'",
          "short": true
        }]
      }]
    }'
fi

echo "✅ Vulnerability scanning complete. Reports saved to reports/ directory."
