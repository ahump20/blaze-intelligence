class BlazeContentLoader { constructor(config = {}) { this.config = { apiBaseUrl: config.apiBaseUrl || '/api', updateInterval: config.updateInterval || 30000, maxRetries: config.maxRetries || 3, retryDelay: config.retryDelay || 5000, enableCache: config.enableCache !== false, cacheTimeout: config.cacheTimeout || 60000, ...config }; this.cache = new Map(); this.updateTimers = new Map(); this.retryCounters = new Map(); this.loadingStates = new Map(); this.errorStates = new Map(); this.init(); } init() { console.log('üöÄ Blaze Content Loader initialized'); this.setupErrorHandling(); this.startHealthCheck(); } setupErrorHandling() { window.addEventListener('unhandledrejection', (event) => { console.error('üö® Unhandled promise rejection:', event.reason); this.showErrorNotification('System error occurred', 'error'); }); } async startHealthCheck() { const checkHealth = async () => { try { const response = await this.makeRequest('/api/enhanced-gateway?endpoint=health'); if (response.success) { this.clearErrorState('system'); this.updateSystemStatus('operational'); } else { throw new Error('Health check failed'); } } catch (error) { console.warn('üî∏ Health check failed:', error.message); this.setErrorState('system', 'API health check failed'); this.updateSystemStatus('degraded'); } setTimeout(checkHealth, 2 * 60 * 1000); }; checkHealth(); } async makeRequest(url, options = {}) { const cacheKey = `${url}-${JSON.stringify(options)}`; if (this.config.enableCache && this.cache.has(cacheKey)) { const cached = this.cache.get(cacheKey); if (Date.now() - cached.timestamp < this.config.cacheTimeout) { return { ...cached.data, cached: true }; } } const retryKey = `request-${url}`; const currentRetries = this.retryCounters.get(retryKey) || 0; try { const response = await fetch(url, { headers: { 'Content-Type': 'application/json', ...options.headers }, ...options }); if (!response.ok) { throw new Error(`HTTP ${response.status}: ${response.statusText}`); } const data = await response.json(); this.retryCounters.set(retryKey, 0); if (this.config.enableCache) { this.cache.set(cacheKey, { data, timestamp: Date.now() }); } return data; } catch (error) { console.error(`üî¥ Request failed [${url}]:`, error.message); if (currentRetries < this.config.maxRetries) { this.retryCounters.set(retryKey, currentRetries + 1); console.log(`üîÑ Retrying request (${currentRetries + 1}/${this.config.maxRetries})...`); await new Promise(resolve => setTimeout(resolve, this.config.retryDelay)); return this.makeRequest(url, options); } this.retryCounters.set(retryKey, 0); throw error; } } async loadCardinalsAnalytics() { const elementId = 'cardinals-analytics'; try { this.setLoadingState(elementId, true); this.clearErrorState(elementId); const response = await this.makeRequest('/api/enhanced-gateway?endpoint=cardinals-analytics'); if (response.success) { this.updateCardinalsUI(response.data, response.meta); this.setLoadingState(elementId, false); this.scheduleUpdate('cardinals', () => this.loadCardinalsAnalytics()); } else { throw new Error('Failed to load Cardinals analytics'); } } catch (error) { console.error('‚ùå Cardinals analytics loading failed:', error); this.setErrorState(elementId, error.message); this.setLoadingState(elementId, false); this.showErrorNotification('Failed to load Cardinals data', 'warning'); } } updateCardinalsUI(data, meta) { const readinessElement = document.getElementById('cardinals-readiness'); if (readinessElement) { this.animateNumber(readinessElement, parseFloat(data.performance.overall), 1, '%'); } const trendElement = document.getElementById('cardinals-trend'); if (trendElement) { const trendIcon = data.performance.trend === 'up' ? 'üìà' : data.performance.trend === 'down' ? 'üìâ' : 'üìä'; trendElement.innerHTML = `${trendIcon} ${data.performance.trend.toUpperCase()}`; trendElement.className = `trend-indicator trend-${data.performance.trend}`; } const confidenceElement = document.getElementById('cardinals-confidence'); if (confidenceElement) { this.animateNumber(confidenceElement, parseFloat(data.performance.confidence), 1, '%'); } this.updatePlayerInsights(data.playerInsights); this.updatePredictiveAnalysis(data.predictive); this.updateDataTimestamp(meta); } async loadMultiSportDashboard() { const elementId = 'multi-sport-dashboard'; try { this.setLoadingState(elementId, true); this.clearErrorState(elementId); const response = await this.makeRequest('/api/enhanced-gateway?endpoint=multi-sport-dashboard'); if (response.success) { this.updateDashboardUI(response.data, response.meta); this.setLoadingState(elementId, false); this.scheduleUpdate('dashboard', () => this.loadMultiSportDashboard()); } else { throw new Error('Failed to load dashboard data'); } } catch (error) { console.error('‚ùå Dashboard loading failed:', error); this.setErrorState(elementId, error.message); this.setLoadingState(elementId, false); } } updateDashboardUI(data, meta) { const dashboardContainer = document.getElementById('dashboard-teams'); if (!dashboardContainer) return; Object.entries(data.teams).forEach(([teamKey, teamData]) => { const teamCard = document.getElementById(`team-${teamKey}`); if (teamCard) { this.updateTeamCard(teamCard, teamKey, teamData); } }); this.updateSystemStatus(data.system); this.updateInsights(data.insights); } async loadNotifications() { try { const response = await this.makeRequest('/api/enhanced-gateway?endpoint=notifications'); if (response.success && response.data.notifications) { this.updateNotificationsUI(response.data); this.scheduleUpdate('notifications', () => this.loadNotifications(), 15000); } } catch (error) { console.error('‚ùå Notifications loading failed:', error); } } updateNotificationsUI(data) { const notificationContainer = document.getElementById('notifications-container'); if (!notificationContainer) return; notificationContainer.innerHTML = ''; data.notifications.forEach(notification => { const notificationElement = this.createNotificationElement(notification); notificationContainer.appendChild(notificationElement); }); const badge = document.getElementById('notification-badge'); if (badge) { badge.textContent = data.count; badge.style.display = data.count > 0 ? 'block' : 'none'; } } createNotificationElement(notification) { const element = document.createElement('div'); element.className = `notification notification-${notification.type}`; element.innerHTML = ` <div class=\"notification-header\"> <strong>${notification.title}</strong> <span class=\"notification-time\">${this.formatTimeAgo(notification.timestamp)}</span> </div> <div class=\"notification-body\">${notification.message}</div> `; if (notification.type === 'info') { setTimeout(() => { element.style.opacity = '0'; setTimeout(() => element.remove(), 300); }, 5000); } return element; } animateNumber(element, target, decimals = 0, suffix = '') { const start = parseFloat(element.textContent.replace(/[^0-9.-]/g, '')) || 0; const duration = 1000; const startTime = Date.now(); const animate = () => { const elapsed = Date.now() - startTime; const progress = Math.min(elapsed / duration, 1); const easeOut = 1 - Math.pow(1 - progress, 3); const current = start + (target - start) * easeOut; element.textContent = current.toFixed(decimals) + suffix; if (progress < 1) { requestAnimationFrame(animate); } }; animate(); } scheduleUpdate(key, updateFunction, interval = null) { if (this.updateTimers.has(key)) { clearTimeout(this.updateTimers.get(key)); } const updateInterval = interval || this.config.updateInterval; const timer = setTimeout(() => { updateFunction(); }, updateInterval); this.updateTimers.set(key, timer); } setLoadingState(elementId, isLoading) { this.loadingStates.set(elementId, isLoading); const element = document.getElementById(elementId); if (element) { if (isLoading) { element.classList.add('loading'); this.showLoadingSpinner(element); } else { element.classList.remove('loading'); this.hideLoadingSpinner(element); } } } setErrorState(elementId, errorMessage) { this.errorStates.set(elementId, errorMessage); const element = document.getElementById(elementId); if (element) { element.classList.add('error'); this.showErrorMessage(element, errorMessage); } } clearErrorState(elementId) { this.errorStates.delete(elementId); const element = document.getElementById(elementId); if (element) { element.classList.remove('error'); this.hideErrorMessage(element); } } showLoadingSpinner(element) { let spinner = element.querySelector('.loading-spinner'); if (!spinner) { spinner = document.createElement('div'); spinner.className = 'loading-spinner'; spinner.innerHTML = '‚ö° Loading...'; element.appendChild(spinner); } } hideLoadingSpinner(element) { const spinner = element.querySelector('.loading-spinner'); if (spinner) { spinner.remove(); } } formatTimeAgo(timestamp) { const now = new Date(); const time = new Date(timestamp); const diffMs = now - time; const diffMins = Math.floor(diffMs / 60000); if (diffMins < 1) return 'Just now'; if (diffMins < 60) return `${diffMins}m ago`; if (diffMins < 1440) return `${Math.floor(diffMins / 60)}h ago`; return `${Math.floor(diffMins / 1440)}d ago`; } showErrorNotification(message, type = 'error') { const toast = document.createElement('div'); toast.className = `toast toast-${type}`; toast.textContent = message; document.body.appendChild(toast); setTimeout(() => { toast.style.opacity = '0'; setTimeout(() => toast.remove(), 300); }, 3000); } updateSystemStatus(status) { const statusElement = document.getElementById('system-status'); if (statusElement) { statusElement.textContent = status; statusElement.className = `system-status status-${status}`; } } async loadAll() { console.log('üîÑ Loading all content...'); const loadPromises = [ this.loadCardinalsAnalytics(), this.loadMultiSportDashboard(), this.loadNotifications() ]; try { await Promise.allSettled(loadPromises); console.log('‚úÖ All content loaded successfully'); } catch (error) { console.error('‚ùå Some content failed to load:', error); } } destroy() { this.updateTimers.forEach(timer => clearTimeout(timer)); this.updateTimers.clear(); this.cache.clear(); console.log('üßπ Blaze Content Loader destroyed'); } } if (typeof window !== 'undefined') { let blazeLoader; document.addEventListener('DOMContentLoaded', () => { console.log('üéØ Initializing Blaze Content Loader...'); blazeLoader = new BlazeContentLoader({ updateInterval: 30000, enableCache: true, cacheTimeout: 60000 }); blazeLoader.loadAll(); window.blazeLoader = blazeLoader; }); window.addEventListener('beforeunload', () => { if (blazeLoader) { blazeLoader.destroy(); } }); } if (typeof module !== 'undefined' && module.exports) { module.exports = BlazeContentLoader; }